{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["// ----------------\r\n// TYPE DEFINITIONS\r\n// ----------------\r\n\r\ntype HTMLElementOrSelector = HTMLElement | string\r\n\r\n// ---------\r\n// SELECTION\r\n// ---------\r\n\r\nclass _$ {\r\n\r\n    /** The selection of elements to manipulate */\r\n    private selection: HTMLElement[] = []\r\n\r\n    // ARRAY-LIKE METHODS\r\n    // ------------------\r\n\r\n    /** Returns the element at the given index position */\r\n    at(index: number): HTMLElement | undefined {\r\n        return this.selection.at(index)\r\n    }\r\n\r\n    /** Returns the length of the selection array */\r\n    get length() {\r\n        return this.selection.length\r\n    }\r\n\r\n    /** Execute a callback function for each selected element */\r\n    forEach(cb: (element: HTMLElement, idx: number, arr: HTMLElement[]) => void) {\r\n        this.selection.forEach(cb)\r\n    }\r\n\r\n    /** Filter the selection based on a callback function */\r\n    filter(cb: (element: HTMLElement, idx: number, arr: HTMLElement[]) => boolean) {\r\n        this.selection = this.selection.filter(cb)\r\n        return this\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n    // -----------\r\n\r\n    /**\r\n     * Instantiates a new Selection object\r\n     * @param elements List of HTML elements or DOM selectors to select\r\n     */\r\n    constructor(...elements: HTMLElementOrSelector[]) {\r\n        if (elements) {\r\n            this.select(...elements)\r\n        }\r\n    }\r\n\r\n    // SELECT\r\n    // ------\r\n\r\n    /**\r\n     * Selects HTML elements and appends them to the selection\r\n     * @param elements List of HTML elements or DOM selectors to select\r\n     */\r\n    public select(...elements: HTMLElementOrSelector[]) {\r\n        for (const element of elements) {\r\n            if (typeof element === 'string') {\r\n                const s = document.querySelectorAll(element) as NodeListOf<HTMLElement>\r\n                this.selection.push(...Array.from(s)) //  Convert NodeList --> Array\r\n            } else {\r\n                this.selection.push(element)\r\n            }\r\n        }\r\n        return this\r\n    }\r\n\r\n    // CONTENTS\r\n    // --------\r\n\r\n    set textContent(text: string) {\r\n        this.selection.forEach(element => element.textContent = text)\r\n    }\r\n\r\n    set innerHTML(text: string) {\r\n        this.selection.forEach(element => element.innerHTML = text)\r\n    }\r\n\r\n    // CLASS-LIST\r\n    // ----------\r\n\r\n    /** Allows for manipulation of selection's class tokens */\r\n    public readonly classList = {\r\n\r\n        /**\r\n         * Adds the classNames to the classLists array\r\n         * @param tokens CSS classNames\r\n         * @see {@link DOMTokenList.add}\r\n         */\r\n        add: (...tokens: string[]) => {\r\n            this.selection.forEach(element => element.classList.add(...tokens))\r\n            return this\r\n        },\r\n\r\n        /**\r\n         * Removes the classNames from the classLists array\r\n         * @param tokens CSS classNames\r\n         * @see {@link DOMTokenList.remove}\r\n         */\r\n        remove: (...tokens: string[]) => {\r\n            this.selection.forEach(element => element.classList.remove(...tokens))\r\n            return this\r\n        },\r\n\r\n        /**\r\n         * Toggles a CSS class in the classList array\r\n         * @param token CSS className\r\n         * @param force force set boolean to value\r\n         * @see {@link DOMTokenList.toggle}\r\n         */\r\n        toggle: (token: string, force?: boolean) => {\r\n            this.selection.forEach(element => element.classList.toggle(token, force))\r\n            return this\r\n        },\r\n\r\n        /**\r\n         * Checks if all selected elements have the given class\r\n         * @param tokens CSS className\r\n         */\r\n        every: (token: string) => {\r\n            return this.selection.every(element => element.classList.contains(token))\r\n        },\r\n\r\n        /**\r\n         * Checks if any selected elements have the given class\r\n         * @param tokens CSS className\r\n         */\r\n        some: (token: string) => {\r\n            return this.selection.some(element => element.classList.contains(token))\r\n        }\r\n\r\n    }\r\n\r\n    // ATTRIBUTES\r\n    // ----------\r\n\r\n    /**\r\n     * Returns the value of the given attribute for all selected elements\r\n     * @param name Attribute name\r\n     */\r\n    public getAttribute(name: string) {\r\n        return this.selection.map(element => element.getAttribute(name))\r\n    }\r\n\r\n    /**\r\n     * Sets the value of the given attribute for all selected elements\r\n     * @param name The name of the attribute whose value is to be set\r\n     * @param value The value to set the attribute to\r\n     */\r\n    public setAttribute(name: string, value: string) {\r\n        this.selection.forEach(element => element.setAttribute(name, value))\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Removes the given attribute from all selected elements\r\n     * @param name The name of the attribute to remove\r\n     */\r\n    public removeAttribute(name: string) {\r\n        this.selection.forEach(element => element.removeAttribute(name))\r\n        return this\r\n    }\r\n\r\n    // STYLE\r\n    // -----\r\n\r\n    public style = {\r\n\r\n        /**\r\n         * Sets the CSS property to the given value for all selected elements\r\n         * @param property CSS property\r\n         * @param value CSS property value\r\n         */\r\n        setProperty: (property: string, value: string) => {\r\n            this.selection.forEach(element => element.style.setProperty(property, value))\r\n            return this\r\n        },\r\n\r\n        /**\r\n         * Removes the CSS property from all selected elements\r\n         * @param property CSS property\r\n         */\r\n        removeProperty: (property: string) => {\r\n            this.selection.forEach(element => element.style.removeProperty(property))\r\n            return this\r\n        },\r\n\r\n    }\r\n\r\n    // EVENT LISTENER\r\n    // --------------\r\n\r\n    /** Add an event listener to all selected elements */\r\n    public addEventListener(event: keyof HTMLElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) {\r\n        this.selection.forEach(element => element.addEventListener(event, listener, options))\r\n        return this\r\n    }\r\n\r\n    /** Remove an event listener from all selected elements */\r\n    public removeEventListener(event: keyof HTMLElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) {\r\n        this.selection.forEach(element => element.removeEventListener(event, listener, options))\r\n        return this\r\n    }\r\n\r\n}\r\n\r\nexport const $ = (...elements: HTMLElementOrSelector[]) => new _$(...elements)\r\n"],
  "mappings": "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",
  "names": []
}
