{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["//  =============\r\n//  DOM COMMANDER\r\n//  =============\r\n\r\nclass _$ {\r\n\r\n    private selection: HTMLElement[] = []\r\n\r\n    constructor(element: HTMLElement | HTMLElement[] | string) {\r\n\r\n        if (typeof element === 'string') {\r\n            this.selection = Array.from(document.querySelectorAll(element)) //  Convert NodeList --> Array\r\n        } else if (Array.isArray(element)) {\r\n            this.selection = [...element]\r\n        } else {\r\n            this.selection = [element]\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n\r\n    //  ==========\r\n    //  CLASS-LIST\r\n    //  ==========\r\n\r\n    /**\r\n     * Adds the classNames to the classLists array\r\n     * @param tokens CSS classNames\r\n     */\r\n    addClass = (...tokens: string[]) => {\r\n        this.forEach(element => element.classList.add(...tokens))\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Removes the classNames from the classLists array\r\n     * @param tokens CSS classNames\r\n     */\r\n    removeClass = (...tokens: string[]) => {\r\n        this.forEach(element => element.classList.remove(...tokens))\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Toggles a CSS class in the classList array\r\n     * @param token CSS className\r\n     * @param force force set boolean to value\r\n     */\r\n    toggleClass = (token: string, force?: boolean) => {\r\n        this.forEach(element => element.classList.toggle(token, force))\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Checks if all selected elements have the given classes\r\n     * @param tokens CSS classNames\r\n     */\r\n    hasClass = (...tokens: string[]) => {\r\n        return this.selection.every(element => {\r\n            let allHaveToken = true\r\n            for (const token of tokens) {\r\n                if (!element.classList.contains(token)) {\r\n                    allHaveToken = false\r\n                    break\r\n                }\r\n            }\r\n            return allHaveToken\r\n        })\r\n    }\r\n\r\n\r\n    //  ===\r\n    //  SET\r\n    //  ===\r\n\r\n    /**\r\n     * Sets the innerText to given string\r\n     * @param text Text\r\n     */\r\n    setText = (text: string) => {\r\n        this.forEach(element => element.innerText = text)\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Sets the innerHTML to given string\r\n     * @param html HTML markup\r\n     */\r\n    setHTML = (html: string) => {\r\n        this.forEach(element => element.innerHTML = html)\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Sets attributes to all HTML elements\r\n     * @param attributes Key-Value pairs of attributes\r\n     */\r\n    setAttributes = (attributes: { [name: string]: string }) => {\r\n        this.forEach(element => {\r\n            for (const name of Object.keys(attributes)) {\r\n                element.setAttribute(name, attributes[name])\r\n            }\r\n        })\r\n        return this\r\n    }\r\n\r\n\r\n    /**\r\n     * Apply CSS to selected elements\r\n     * @param styles CSS styles object\r\n     */\r\n    setCSS = (styles: { [k: string]: string }) => {\r\n        this.forEach(element => {\r\n            for (const property of Object.keys(styles)) {\r\n                element.style.setProperty(property, styles[property])\r\n            }\r\n        })\r\n        return this\r\n    }\r\n\r\n    //  ===\r\n    //  GET\r\n    //  ===\r\n\r\n    /**\r\n     * Returns the HTML DOM Element at the given index position\r\n     * @param idx Index position\r\n     * @returns HTMLElement at index position\r\n     */\r\n    getElement = (idx: number) => {\r\n        return this.selection[idx]\r\n    }\r\n\r\n    //  ======\r\n    //  REMOVE\r\n    //  ======\r\n\r\n    /**\r\n     * Removes DOM elements that satisfy the condition (condition default to always return true)\r\n     * @param condition Callback function to determine whether to remove an element\r\n     */\r\n    removeElement = (condition: (element: HTMLElement) => boolean = () => true) => {\r\n        this.forEach(element => condition(element) && element.remove())\r\n        this.filter((element) => element != null)\r\n        return this\r\n    }\r\n\r\n\r\n    /**\r\n     * Removes the given attributes from all selected HTML elements\r\n     * @param attributes List of attributes to remove\r\n     */\r\n    removeAttribute = (name: string) => {\r\n        this.forEach(element => element.removeAttribute(name))\r\n        return this\r\n    }\r\n\r\n    //  =====\r\n    //  NODES\r\n    //  =====\r\n\r\n    /**\r\n     * Selects the enxt element siblings\r\n     */\r\n    next = () => {\r\n        this.selection = this.selection.map(element => element.nextElementSibling as HTMLElement).filter(element => element != null)\r\n        return this\r\n    }\r\n\r\n\r\n    /**\r\n     * Selects the previous element siblings\r\n     */\r\n    prev = () => {\r\n        this.selection = this.selection.map(element => element.previousElementSibling as HTMLElement).filter(element => element != null)\r\n        return this\r\n    }\r\n\r\n\r\n    /**\r\n     * Appends the given HTML nodes to the selected DOM elements\r\n     * @param nodes HTML Nodes\r\n     */\r\n    append = (...nodes: (string | Node)[]) => {\r\n        this.forEach(element => element.append(...nodes))\r\n        return this\r\n    }\r\n\r\n    //  ======\r\n    //  EVENTS\r\n    //  ======\r\n\r\n    /**\r\n     * Registers a onEvent handler callback\r\n     * @param event HTML Element Event\r\n     * @param listener Callback listener to fire on event\r\n     * @param options Event listener options\r\n     */\r\n    on = (event: keyof HTMLElementEventMap, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => {\r\n        this.selection.forEach(element => element.addEventListener(event, listener, options))\r\n        return this\r\n    }\r\n\r\n    //  =======\r\n    //  UTILITY\r\n    //  =======\r\n\r\n    /**\r\n     * Filters elements based on provided criteria\r\n     * @param cb Callback function to determine filter criteria\r\n     */\r\n    filter = (cb: (element: HTMLElement, idx: number, arr: HTMLElement[]) => boolean) => {\r\n        this.selection = this.selection.filter(cb)\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Executes a callback for each HTML element\r\n     * @param cb Callback function\r\n     * @returns \r\n     */\r\n    forEach = (cb: (element: HTMLElement, idx: number, arr: HTMLElement[]) => void) => {\r\n        this.selection.forEach(cb)\r\n        return this\r\n    }\r\n\r\n}\r\n\r\n//  =============\r\n//  MAIN FUNCTION\r\n//  =============\r\n\r\n/**\r\n * DOM Commander\r\n * @param element HTML Element or DOM selector\r\n */\r\nconst $ = (element: HTMLElement | string) => new _$(element)\r\n\r\n//  ==============\r\n//  CREATE ELEMENT\r\n//  ==============\r\n\r\n/**\r\n * Creates one or more HTML elements\r\n * @param tagNames List of HTML tagNames to create\r\n */\r\n$.create = (...tagNames: (keyof HTMLElementTagNameMap)[]) => {\r\n    const elements: HTMLElement[] = []\r\n    tagNames.forEach(tagName => {\r\n        const element = document.createElement(tagName)\r\n        elements.push(element)\r\n    })\r\n    return new _$(elements)\r\n}"],
  "mappings": "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",
  "names": []
}
